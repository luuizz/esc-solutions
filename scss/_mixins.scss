@use 'sass:map';

@mixin transition($time: 0.3s) {
  transition-property: all;
  transition-timing-function: ease;
  transition-duration: $time;
}

@mixin input-styles {
  all: unset;
  height: 5.6rem;
  background-color: var(--white);
  flex: 1;
  max-width: 100%;
  padding: 1.6rem 2.4rem;
  border-radius: 0.4rem;
  border: 1px solid var(--gray-600);
  font-size: 1.6rem;
  color: var(--gray-900);
  line-height: 150%;
  transition: all 0.3s ease;

  &::placeholder {
    opacity: 0.5;
  }

  &:focus,
  &:focus-within {
    outline: none;
    border-color: var(--accent-01);
    box-shadow: 0 0 0 1px var(--accent-01), 0px 1px 2px rgba(0, 0, 0, 0.15);
  }
}

@mixin flex-start {
  display: flex;
  align-items: flex-start;
}

@mixin flex-center {
  display: flex;
  align-items: center;
}

@mixin flex-total-center {
  @include flex-center;
  justify-content: center;
}

@mixin flex-center-justify {
  @include flex-center;
  justify-content: space-between;
}

@mixin flex-start-justify {
  @include flex-start;
  justify-content: space-between;
}

$breakpoints: (
  'desktop-large': 1600px,
  'desktop': 1440px,
  'desktop-small': 1366px,
  'laptop': 1280px,
  'laptop-small': 1050px,
  'tablet': 991px,
  'mobile': 560px,
);

@mixin responsive($breakpoint-name, $direction: max) {
  @if map.has-key($breakpoints, $breakpoint-name) {
    $value: map.get($breakpoints, $breakpoint-name);

    @if $direction == max {
      @media (max-width: $value) {
        @content;
      }
    } @else if $direction == min {
      @media (min-width: $value) {
        @content;
      }
    } @else {
      @warn "Direção inválida: use 'min' ou 'max'";
    }
  } @else {
    @warn "Breakpoint que você definiu não existe";
  }
}

@mixin truncate($lines) {
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: $lines;
}
